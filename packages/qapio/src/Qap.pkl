module com.qapio
import "package://pkg.pkl-lang.org/pkl-pantry/org.json_schema@1.1.0#/JsonSchema.pkl"

import "mixins/IdProp.pkl"

import "mixins/TasksProp.pkl"
import "mixins/UiProp.pkl"
import "mixins/MixinProp.pkl"
import "mixins/DependenciesProp.pkl"
import "mixins/ResourcesProp.pkl"
import "mixins/AuthProp.pkl"

open class Qaplet {
  Type: String
  Props: Any
}

class SpaceData {

}

class SpaceProps extends Qaplet {
  Type = "com.qapio.SpaceProps"
  Props = new SpaceData {}
}


class PropsData {
  Qaplet: Qaplet = new SpaceProps {}
  Auth: AuthProp.Props
}
/*

class IdentityType {
  Name: String
  Role: Listing<String>
  Tone: Listing<String>
}

open class PropertyType {
  Name: String?
  Description: String?
  Required: Boolean = true
}

class ContextProp {
  Name: String?
  Description: String?
  Value: String
}

class StringProp extends PropertyType {
  Default: String?
}

class NumberProp extends PropertyType {
  Default: Number?
  Min: Number?
  Max: Number?
}

class IntegerProp extends PropertyType {
  Default: Int?
  Min: Int?
  Max: Int?
}

class BooleanProp extends PropertyType {
  Default: Boolean?
}

class ArrayProp extends PropertyType {
  Default: Listing<Any>?
  OneOf: Listing<Any>?
  AnyOf: Listing<Any>?
}

class QapiDefinition {
  Name: String?
  Description: String?
  Template: String
  Properties: Listing<PropertyType>
  Context: Listing<ContextProp>
}

class AssistantType {
  Identity: IdentityType
  Qapi: Listing<QapiDefinition>
  Context: Listing<ContextProp>
  Team: Listing<AssistantType>
  Principles: Listing<String>
}
*/


/*class AudienceType {
  Background: Listing<String>
  Success: Listing<String>
  Environment: Listing<String>
}*/


class KnowledgeItem {
  Name: String
  Description: String
  Tags: Listing<String>
  Value: String | Resource
}

class ExemplarItem {
  Name: String
  Description: String
  Tags: Listing<String>
  Value: String | Resource
}


typealias JsonSchemaTypeName = "string" | "number" | "integer" | "boolean" | "object" | "array" | "null"

open class PropertyType {
  abstract Type: JsonSchemaTypeName;
  Description: String?
}


class StringProp extends PropertyType {
  Type: JsonSchemaTypeName = "string"
  Default: String?
}

class NumberProp extends PropertyType {
  Type: JsonSchemaTypeName = "number"
  Default: Number?
  Min: Number?
  Max: Number?
}

class IntegerProp extends PropertyType {
  Type: JsonSchemaTypeName = "integer"
  Default: Int?
  Min: Int?
  Max: Int?
}

class BooleanProp extends PropertyType {
  Type: JsonSchemaTypeName = "boolean"
  Default: Boolean?
}

class ArrayProp extends PropertyType {
  Type: JsonSchemaTypeName = "array"
  Default: Listing<Any>?
  Value: Listing<JsonSchemaTypeName> | JsonSchemaTypeName
}

typealias JsonSchemaType = JsonSchema.Schema

class QapiType {
  Name: String
  Description: String
  Parameters: Mapping<String, (StringProp | NumberProp | IntegerProp | BooleanProp | ArrayProp | JsonSchemaType)>
  Required: Listing<String>
  Expression: String
  Strict: Boolean = false
}

class ContextType {
  Background: Listing<String>
  SucessCriteria: Listing<String>
  Environment: Listing<String>
}

class AssistantType {
  Task: Listing<String>
  Role: Listing<String>
  Context: ContextType
  Audience: Listing<String>
  Format: Listing<String>
  Tone: Listing<String>
  Guardrails: Listing<String>
  Exemplars: Listing<ExemplarItem>
  Knowledge: Listing<KnowledgeItem>
  Workspace: Mapping<String, Resource>
  Qapi: Listing<QapiType>
}


class FunctionCall {
  type: String = "function"
  name: String
  description: String
  parameters: JsonSchemaType
  strict: Boolean
}



function createParameter(parameter: StringProp | NumberProp | IntegerProp | BooleanProp | ArrayProp | JsonSchemaType ): JsonSchemaType =
  if (parameter is JsonSchemaType)
    parameter
  else if (parameter.Type == "array")
    new JsonSchemaType{type="array"; description = parameter.Description; items = new JsonSchemaType {type=parameter.Value};}
  else new JsonSchemaType {type = parameter.Type; description = parameter.Description; }


function createTool(qapi: QapiType): FunctionCall =
  new FunctionCall {
    name = qapi.Name
    description = qapi.Description
    parameters = new JsonSchemaType {
      type = "object"
      properties = qapi.Parameters.keys.toMap((e) -> e, (e) -> createParameter(qapi.Parameters[e])).toMapping()
      required = qapi.Required
      additionalProperties = !qapi.Strict
    }
    strict = qapi.Strict
  }

Id: IdProp.Props
Qapi: MixinProp.Props?
Props: PropsData = new {
  Qaplet = new SpaceProps {}
}
Tasks: TasksProp.Props
Ui: UiProp.Props
Resources: ResourcesProp.Props
Dependencies: DependenciesProp.Props
Assistant: AssistantType?

output {
  value = new Dynamic {
    ["Id"] = Id
    ["Qapi"] = Qapi
    ["Tasks"] = Tasks
    ["Ui"] = Ui
    ["Resources"] = Resources
    ["Dependencies"] = Dependencies
    ["Props"] = Props
    ["Assistant"] = new Dynamic {
      ["Task"] = Assistant.Task
      ["Role"] = Assistant.Role
      ["Context"] = Assistant.Context
      ["Audience"] = Assistant.Audience
      ["Format"] = Assistant.Format
      ["Tone"] = Assistant.Tone
      ["Guardrails"] = Assistant.Guardrails
      ["Exemplars"] = Assistant.Exemplars
      ["Knowledge"] = Assistant.Knowledge
      ["Workspace"] = Assistant.Workspace
      ["Qapi"] = Assistant.Qapi
      ["OpenAi"] = new Dynamic {
        ["Tools"] = Assistant.Qapi.toList().map((t) -> createTool(t))
      }
    }
  }
}
