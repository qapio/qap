module com.qapio
import "package://pkg.pkl-lang.org/pkl-pantry/org.json_schema@1.1.0#/JsonSchema.pkl"

class UserType {
  Background: Listing<String>
  Success: Listing<String>
  Environment: Listing<String>
}


class KnowledgeItem {
  Name: String
  Description: String
  Tags: Listing<String>
  Value: String | Resource
}

typealias JsonSchemaTypeName = "string" | "number" | "integer" | "boolean" | "object" | "array" | "null"

open class PropertyType {
  abstract Type: JsonSchemaTypeName;
  Name: String?
  Description: String?
  Required: Boolean = true
}


class StringProp extends PropertyType {
  Type: JsonSchemaTypeName = "string"
  Default: String?
}

class NumberProp extends PropertyType {
  Type: JsonSchemaTypeName = "number"
  Default: Number?
  Min: Number?
  Max: Number?
}

class IntegerProp extends PropertyType {
  Type: JsonSchemaTypeName = "integer"
  Default: Int?
  Min: Int?
  Max: Int?
}

class BooleanProp extends PropertyType {
  Type: JsonSchemaTypeName = "boolean"
  Default: Boolean?
}

class ArrayProp extends PropertyType {
  Type: JsonSchemaTypeName = "array"
  Default: Listing<Any>?
}

class QapiType {
  Name: String
  Description: String
  Parameters: Listing<StringProp | NumberProp | IntegerProp | BooleanProp | ArrayProp>
  Expression: String
}

class Assistant {
  Task: Listing<String>
  User: UserType
  Exemplars: Listing<String>
  Format: Listing<String>
  Tone: Listing<String>
  Role: Listing<String>
  Knowledge: Listing<KnowledgeItem>
  Workspace: Mapping<String, Resource>
  Qapi: Listing<QapiType>
}

Task: Listing<String>
User: UserType
Exemplars: Listing<String>
Format: Listing<String>
Tone: Listing<String>
Role: Listing<String>
Knowledge: Listing<KnowledgeItem>
Workspace: Mapping<String, Resource>
Qapi: Listing<QapiType>


class FunctionCall {
  type: String = "function"
  name: String
  description: String
  parameters: JsonSchema.Schema
}



function createTool(qapi: QapiType): FunctionCall =
  new FunctionCall {
    name = qapi.Name
    description = qapi.Description
    parameters = new JsonSchema {
      type = "object"
      properties = qapi.Parameters.toList().toMap((e) -> e.Name, (e) -> new JsonSchema.Schema {type = e.Type; description = e.Description; }).toMapping()
      required = qapi.Parameters.toList().filter((t) -> t.Required).map((t) -> t.Name).toListing()
    }
  }

output {
  value = new Dynamic {
    ["Task"] = Task
    ["User"] = User
    ["Exemplars"] = Exemplars
    ["Format"] = Format
    ["Tone"] = Tone
    ["Role"] = Role
    ["Knowledge"] = Knowledge
    ["Workspace"] = Workspace
    ["Qapi"] = Qapi
    ["OpenAi"] = new Dynamic {
      ["Tools"] = Qapi.toList().map((t) -> createTool(t))
    }
  }
}